from django.shortcuts import render

# Create your views here.
from django.shortcuts import render, redirect
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from .models import Site
from .serializers import SiteSerializer
import ipfshttpclient
import subprocess
import os

@api_view(['POST'])
def create_site(request):
    site_name = request.data.get('siteName')
    onion_url = f"{site_name}.hidden-service.onion"
    file = request.FILES.get('file')

    try:
        # Upload file to IPFS
        client = ipfshttpclient.connect()
        res = client.add(file)
        ipfs_hash = res['Hash']

        # Create Tor hidden service
        create_tor_hidden_service(site_name)

        # Create NGINX configuration
        create_nginx_config(onion_url, ipfs_hash)

        site = Site(name=site_name, onion_url=onion_url, ipfs_hash=ipfs_hash, file=file)
        site.save()

        serializer = SiteSerializer(site)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

def home(request):
    return render(request, 'home.html')

def create_site_form(request):
    if request.method == 'POST':
        site_name = request.POST.get('siteName')
        onion_url = f"{site_name}.hidden-service.onion"
        file = request.FILES.get('file')

        try:
            # Upload file to IPFS
            client = ipfshttpclient.connect()
            res = client.add(file)
            ipfs_hash = res['Hash']

            # Create Tor hidden service
            create_tor_hidden_service(site_name)

            # Create NGINX configuration
            create_nginx_config(onion_url, ipfs_hash)

            site = Site(name=site_name, onion_url=onion_url, ipfs_hash=ipfs_hash, file=file)
            site.save()

            return redirect('home')
        except Exception as e:
            return render(request, 'create_site.html', {"error": str(e)})

    return render(request, 'create_site.html')

def create_tor_hidden_service(site_name):
    hidden_service_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'tor', f'hidden_service_{site_name}')
    os.makedirs(hidden_service_dir, exist_ok=True)

    torrc_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'tor', 'torrc')
    with open(torrc_path, 'w') as f:
        f.write(f"HiddenServiceDir {hidden_service_dir}\n")
        f.write("HiddenServicePort 80 127.0.0.1:80\n")

    subprocess.run(["sudo", "systemctl", "reload", "tor"])

def create_nginx_config(onion_url, ipfs_hash):
    nginx_config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'nginx', f'{onion_url}.conf')
    with open(nginx_config_path, 'w') as f:
        f.write(f"server {{\n")
        f.write(f"    listen 80;\n")
        f.write(f"    server_name {onion_url};\n")
        f.write(f"    location / {{\n")
        f.write(f"        proxy_pass http://localhost:8000;\n")
        f.write(f"        proxy_set_header Host $host;\n")
        f.write(f"        proxy_set_header X-Real-IP $remote_addr;\n")
        f.write(f"        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n")
        f.write(f"        proxy_set_header X-Forwarded-Proto $scheme;\n")
        f.write(f"    }}\n")
        f.write(f"}}\n")

    subprocess.run(["sudo", "ln", "-s", nginx_config_path, "/etc/nginx/sites-enabled/"])
    subprocess.run(["sudo", "nginx", "-t"])
    subprocess.run(["sudo", "systemctl", "reload", "nginx"])